source("https://bioconductor.org/biocLite.R")
biocLite("arrayQualityMetrics")
library(GEOquery)
gm1 <- getGEO('GSM1570843')
gm2 <- getGEO('GSM1570844')
gm1
Table(gm1)
gm1
gmt1 <- as.table(gm1)
gmt2 <- as.table(gm2)
gmt1
gmt1 <- as.table(gm1)
gmt1 <- Table(gm1)
gmt1 <- Table(gm1)
gmt2 <- Table(gm2)
gmt1
source("http://bioconductor.org/biocLite.R")
biocLite("pcaMethods")
library(pcaMethods)
listPcaMethods()
shiny::runApp()
prcomp()
t()
t(gm1)
xyplot(gm1)
library(lattice)
xyplot()
View(gmt1)
View(gmt2)
View(gmt1)
View(gmt2)
View(gmt1)
View(gmt2)
View(gmt1)
View(gmt2)
View(gmt1)
t(gmt1)
data.frame(t(gmt1))
t(gmt1)[2]
t(gmt1)[2,]
t(gmt1)[1,]
t(gmt1)[1000,]
t(gmt1)[1000]
t(gmt1)[2,]
length(t(gmt1)[2,])
length(t(gmt2)[2,])
df <- data.frame(t(gmt1)[2,],t(gmt2)[2,])
df
df[1]
df[1,]
df[4,]
df[5,]
df
df <- data.frame(gmt1[2,],gmt2[2,])
df
gmt[2]
gmt1[2]
gmt1[1]
df <- data.frame(gmt1[2],gmt2[2])
df
df[1]
df[1,]
dft <- as.data.frame(t(df))
dft
pca <- prcomp(dft)
View(dft)
length(dft)
dft[1000]
dft[1,]
pca <- prcomp(dft)
pca <- prcomp(na.omit(dft))
is.factor(dft)
is.factor(dft[1,])
is.numeric(dft[1,])
sapply(dft)
sapply(dft,mode)
dft[2,]
pca <- prcomp(df)
sapply(df,mode)
df
df$VALUE <- as.numeric(df$VALUE)
df$VALUE.1 <- as.numeric(df$VALUE.1)
pca <- prcomp(df)
pca
dft <- as.data.frame(t(df))
pca <- prcomp(dft)
pca
pca <- prcomp(df)
pca
pcafig <- xyplot(PC2 ~ PC1 , data=as.data.frame(pca$x))
pcafig
pca <- prcomp(dft)
pcafig <- xyplot(PC2 ~ PC1 , data=as.data.frame(pca$x))
pcafig
pcafig <- xyplot(PC3 ~ PC4  , data=as.data.frame(pca$x))
pca
pca
pca
pca.scores
pca.results()
pca.cv
pcafig <- xyplot(PC2  , data=as.data.frame(pca$x))
pcafig <- xyplot(PC2 ~ PC1 , data=as.data.frame(pca$x))
pcafig
pcafig
pca$x
pca$center
library(GEOquery)
gm1 <- getGEO('GSM1570843')
gm2 <- getGEO('GSM1570844')
gmt1 <- Table(gm1)
gmt2 <- Table(gm2)
df <- data.frame(gmt1[2],gmt2[2])
df$VALUE <- as.numeric(df$VALUE)
df$VALUE.1 <- as.numeric(df$VALUE.1)
dft <- as.data.frame(t(df))
pca <- prcomp(dft)
pcafig <- xyplot(PC2 ~ PC1 , data=as.data.frame(pca$x))
pcafig
library(GEOquery)
gm1 <- getGEO('GSM1570843')
gm2 <- getGEO('GSM1570844')
gm3 <- getGEO('GSM1570845')
gmt1 <- Table(gm1)
gmt2 <- Table(gm2)
gmt3 <- Table(gm3)
df <- data.frame(gmt1[2],gmt2[2],gmt3[2])
df$VALUE <- as.numeric(df$VALUE)
df$VALUE.1 <- as.numeric(df$VALUE.1)
df$VALUE.2 <- as.numeric(df$VALUE.2)
dft <- as.data.frame(t(df))
pca <- prcomp(dft)
pcafig <- xyplot(PC2 ~ PC1 , data=as.data.frame(pca$x))
pcafig
pca$x
xyplot(PC2 ~ PC1 ~ PC3 , data=as.data.frame(pca$x))
xyplot(PC2 ~ PC3 , data=as.data.frame(pca$x))
xyplot(PC1 ~ PC3 , data=as.data.frame(pca$x))
xyplot(PC2 ~ PC1, data=as.data.frame(pca$x))
xyplot(PC2 ~ PC2, data=as.data.frame(pca$x))
xyplot(PC1 ~ PC2, data=as.data.frame(pca$x))
xyplot(PC2 ~ PC1, data=as.data.frame(pca$x))
shiny::runApp()
library(googleVis)
pcafig <- gvisScatterChart(PC2 ~ PC1 , data=as.data.frame(pca$x))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
options('download.file.method.GEOquery' = 'curl')
library(GEOquery)
gse <- getGEO("GSE21653", GSEMatrix = TRUE)
ftp.download()
